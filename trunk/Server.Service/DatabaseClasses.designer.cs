#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.1
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Server.Service
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Sinchosaur")]
	public partial class DatabaseClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
	#region Определения метода расширяемости
	partial void OnCreated();
	partial void InsertUser(User instance);
	partial void UpdateUser(User instance);
	partial void DeleteUser(User instance);
	partial void InsertEvent(Event instance);
	partial void UpdateEvent(Event instance);
	partial void DeleteEvent(Event instance);
	partial void InsertFile(File instance);
	partial void UpdateFile(File instance);
	partial void DeleteFile(File instance);
	partial void InsertDirectory(Directory instance);
	partial void UpdateDirectory(Directory instance);
	partial void DeleteDirectory(Directory instance);
	#endregion
		
		public DatabaseClassesDataContext() : 
				base(global::Server.Service.Properties.Settings.Default.SinchosaurConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<File> Files
		{
			get
			{
				return this.GetTable<File>();
			}
		}
		
		public System.Data.Linq.Table<Directory> Directories
		{
			get
			{
				return this.GetTable<Directory>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _Email;
		
		private string _Passwd;
		
		private short _SpaceLimit;
		
	#region Определения метода расширяемости
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnUserIdChanging(int value);
	partial void OnUserIdChanged();
	partial void OnEmailChanging(string value);
	partial void OnEmailChanged();
	partial void OnPasswdChanging(string value);
	partial void OnPasswdChanged();
	partial void OnSpaceLimitChanging(short value);
	partial void OnSpaceLimitChanged();
	#endregion
		
		public User()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NChar(40) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Passwd", DbType="NChar(32) NOT NULL", CanBeNull=false)]
		public string Passwd
		{
			get
			{
				return this._Passwd;
			}
			set
			{
				if ((this._Passwd != value))
				{
					this.OnPasswdChanging(value);
					this.SendPropertyChanging();
					this._Passwd = value;
					this.SendPropertyChanged("Passwd");
					this.OnPasswdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpaceLimit", DbType="SmallInt NOT NULL")]
		public short SpaceLimit
		{
			get
			{
				return this._SpaceLimit;
			}
			set
			{
				if ((this._SpaceLimit != value))
				{
					this.OnSpaceLimitChanging(value);
					this.SendPropertyChanging();
					this._SpaceLimit = value;
					this.SendPropertyChanged("SpaceLimit");
					this.OnSpaceLimitChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Events")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventId;
		
		private int _FileId;
		
		private int _UserId;
		
		private string _Description;
		
		private System.DateTime _Created;
		
		private EntityRef<File> _File;
		
	#region Определения метода расширяемости
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnEventIdChanging(int value);
	partial void OnEventIdChanged();
	partial void OnFileIdChanging(int value);
	partial void OnFileIdChanged();
	partial void OnUserIdChanging(int value);
	partial void OnUserIdChanged();
	partial void OnDescriptionChanging(string value);
	partial void OnDescriptionChanged();
	partial void OnCreatedChanging(System.DateTime value);
	partial void OnCreatedChanged();
	#endregion
		
		public Event()
		{
			this._File = default(EntityRef<File>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileId", DbType="Int NOT NULL")]
		public int FileId
		{
			get
			{
				return this._FileId;
			}
			set
			{
				if ((this._FileId != value))
				{
					if (this._File.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileIdChanging(value);
					this.SendPropertyChanging();
					this._FileId = value;
					this.SendPropertyChanged("FileId");
					this.OnFileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="File_Event", Storage="_File", ThisKey="FileId", OtherKey="FileId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public File File
		{
			get
			{
				return this._File.Entity;
			}
			set
			{
				File previousValue = this._File.Entity;
				if (((previousValue != value) 
							|| (this._File.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._File.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._File.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._FileId = value.FileId;
					}
					else
					{
						this._FileId = default(int);
					}
					this.SendPropertyChanged("File");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Files")]
	public partial class File : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FileId;
		
		private int _UserId;
		
		private int _DirectoryId;
		
		private string _Name;
		
		private string _PhysicalPath;
		
		private long _Size;
		
		private System.DateTime _LastWrite;
		
		private bool _IsPublic;
		
		private bool _IsActual;
		
		private EntitySet<Event> _Events;
		
		private EntityRef<Directory> _Directory;
		
	#region Определения метода расширяемости
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnFileIdChanging(int value);
	partial void OnFileIdChanged();
	partial void OnUserIdChanging(int value);
	partial void OnUserIdChanged();
	partial void OnDirectoryIdChanging(int value);
	partial void OnDirectoryIdChanged();
	partial void OnNameChanging(string value);
	partial void OnNameChanged();
	partial void OnPhysicalPathChanging(string value);
	partial void OnPhysicalPathChanged();
	partial void OnSizeChanging(long value);
	partial void OnSizeChanged();
	partial void OnLastWriteChanging(System.DateTime value);
	partial void OnLastWriteChanged();
	partial void OnIsPublicChanging(bool value);
	partial void OnIsPublicChanged();
	partial void OnIsActualChanging(bool value);
	partial void OnIsActualChanged();
	#endregion
		
		public File()
		{
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			this._Directory = default(EntityRef<Directory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FileId
		{
			get
			{
				return this._FileId;
			}
			set
			{
				if ((this._FileId != value))
				{
					this.OnFileIdChanging(value);
					this.SendPropertyChanging();
					this._FileId = value;
					this.SendPropertyChanged("FileId");
					this.OnFileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirectoryId", DbType="Int NOT NULL")]
		public int DirectoryId
		{
			get
			{
				return this._DirectoryId;
			}
			set
			{
				if ((this._DirectoryId != value))
				{
					if (this._Directory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDirectoryIdChanging(value);
					this.SendPropertyChanging();
					this._DirectoryId = value;
					this.SendPropertyChanged("DirectoryId");
					this.OnDirectoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhysicalPath", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string PhysicalPath
		{
			get
			{
				return this._PhysicalPath;
			}
			set
			{
				if ((this._PhysicalPath != value))
				{
					this.OnPhysicalPathChanging(value);
					this.SendPropertyChanging();
					this._PhysicalPath = value;
					this.SendPropertyChanged("PhysicalPath");
					this.OnPhysicalPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size", DbType="BigInt NOT NULL")]
		public long Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastWrite", DbType="DateTime NOT NULL")]
		public System.DateTime LastWrite
		{
			get
			{
				return this._LastWrite;
			}
			set
			{
				if ((this._LastWrite != value))
				{
					this.OnLastWriteChanging(value);
					this.SendPropertyChanging();
					this._LastWrite = value;
					this.SendPropertyChanged("LastWrite");
					this.OnLastWriteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPublic", DbType="Bit NOT NULL")]
		public bool IsPublic
		{
			get
			{
				return this._IsPublic;
			}
			set
			{
				if ((this._IsPublic != value))
				{
					this.OnIsPublicChanging(value);
					this.SendPropertyChanging();
					this._IsPublic = value;
					this.SendPropertyChanged("IsPublic");
					this.OnIsPublicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActual", DbType="Bit NOT NULL")]
		public bool IsActual
		{
			get
			{
				return this._IsActual;
			}
			set
			{
				if ((this._IsActual != value))
				{
					this.OnIsActualChanging(value);
					this.SendPropertyChanging();
					this._IsActual = value;
					this.SendPropertyChanged("IsActual");
					this.OnIsActualChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="File_Event", Storage="_Events", ThisKey="FileId", OtherKey="FileId")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Directories_File", Storage="_Directory", ThisKey="DirectoryId", OtherKey="DirectoryId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Directory Directory
		{
			get
			{
				return this._Directory.Entity;
			}
			set
			{
				Directory previousValue = this._Directory.Entity;
				if (((previousValue != value) 
							|| (this._Directory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Directory.Entity = null;
						previousValue.File.Remove(this);
					}
					this._Directory.Entity = value;
					if ((value != null))
					{
						value.File.Add(this);
						this._DirectoryId = value.DirectoryId;
					}
					else
					{
						this._DirectoryId = default(int);
					}
					this.SendPropertyChanged("Directory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.File = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.File = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Directories")]
	public partial class Directory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DirectoryId;
		
		private int _UserId;
		
		private int _ParentId;
		
		private string _Name;
		
		private bool _IsPublic;
		
		private bool _IsActual;
		
		private System.DateTime _Created;
		
		private EntitySet<File> _File;
		
	#region Определения метода расширяемости
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnDirectoryIdChanging(int value);
	partial void OnDirectoryIdChanged();
	partial void OnUserIdChanging(int value);
	partial void OnUserIdChanged();
	partial void OnParentIdChanging(int value);
	partial void OnParentIdChanged();
	partial void OnNameChanging(string value);
	partial void OnNameChanged();
	partial void OnIsPublicChanging(bool value);
	partial void OnIsPublicChanged();
	partial void OnIsActualChanging(bool value);
	partial void OnIsActualChanged();
	partial void OnCreatedChanging(System.DateTime value);
	partial void OnCreatedChanged();
	#endregion
		
		public Directory()
		{
			this._File = new EntitySet<File>(new Action<File>(this.attach_File), new Action<File>(this.detach_File));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirectoryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DirectoryId
		{
			get
			{
				return this._DirectoryId;
			}
			set
			{
				if ((this._DirectoryId != value))
				{
					this.OnDirectoryIdChanging(value);
					this.SendPropertyChanging();
					this._DirectoryId = value;
					this.SendPropertyChanged("DirectoryId");
					this.OnDirectoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentId", DbType="Int NOT NULL")]
		public int ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(256)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPublic", DbType="Bit NOT NULL")]
		public bool IsPublic
		{
			get
			{
				return this._IsPublic;
			}
			set
			{
				if ((this._IsPublic != value))
				{
					this.OnIsPublicChanging(value);
					this.SendPropertyChanging();
					this._IsPublic = value;
					this.SendPropertyChanged("IsPublic");
					this.OnIsPublicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActual", DbType="Bit NOT NULL")]
		public bool IsActual
		{
			get
			{
				return this._IsActual;
			}
			set
			{
				if ((this._IsActual != value))
				{
					this.OnIsActualChanging(value);
					this.SendPropertyChanging();
					this._IsActual = value;
					this.SendPropertyChanged("IsActual");
					this.OnIsActualChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Directories_File", Storage="_File", ThisKey="DirectoryId", OtherKey="DirectoryId")]
		public EntitySet<File> File
		{
			get
			{
				return this._File;
			}
			set
			{
				this._File.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_File(File entity)
		{
			this.SendPropertyChanging();
			entity.Directory = this;
		}
		
		private void detach_File(File entity)
		{
			this.SendPropertyChanging();
			entity.Directory = null;
		}
	}
}
#pragma warning restore 1591
